"0","# Function to find valid combinations"
"0","get_valid_combinations <- function(df, tier_yes_count = 2) {"
"0","  # Split data by Slot"
"0","  slots <- split(df, df$Slot)"
"0","  "
"0","  # Initialize a list to store valid combinations"
"0","  valid_combinations <- list()"
"0","  "
"0","  # Generate combinations"
"0","  combn_helper <- function(slot_lists, current_comb = data.frame(), depth = 1) {"
"0","    if (depth > length(slot_lists)) {"
"0","      # Check if current_comb has exactly 2 items with Tier == 'Yes'"
"0","      if (sum(current_comb$Tier == 'Yes') == tier_yes_count) {"
"0","        valid_combinations <<- append(valid_combinations, list(current_comb))"
"0","      }"
"0","      return()"
"0","    }"
"0","    "
"0","    # Iterate through items in the current slot"
"0","    for (i in 1:nrow(slot_lists[[depth]])) {"
"0","      combn_helper(slot_lists, rbind(current_comb, slot_lists[[depth]][i, ]), depth + 1)"
"0","    }"
"0","  }"
"0","  "
"0","  # Start the recursive combination generation"
"0","  combn_helper(slots)"
"0","  "
"0","  return(valid_combinations)"
"0","}"
